{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { drawLinkLine as _drawLinkLine, drawLinkTriangle as _drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport var LinkInstance = /*#__PURE__*/function () {\n  function LinkInstance(container) {\n    _classCallCheck(this, LinkInstance);\n\n    this.container = container;\n  }\n\n  _createClass(LinkInstance, [{\n    key: \"drawParticle\",\n    value: function drawParticle(context, particle) {\n      var _this = this;\n\n      var linkParticle = particle,\n          container = this.container,\n          particles = container.particles,\n          pOptions = particle.options;\n\n      if (linkParticle.links.length <= 0) {\n        return;\n      }\n\n      context.save();\n      var p1Links = linkParticle.links.filter(function (l) {\n        var linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n        return linkFreq <= pOptions.links.frequency;\n      });\n\n      var _iterator = _createForOfIteratorHelper(p1Links),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var link = _step.value;\n          var p2 = link.destination;\n\n          if (pOptions.links.triangles.enable) {\n            var links = p1Links.map(function (l) {\n              return l.destination;\n            }),\n                vertices = p2.links.filter(function (t) {\n              var linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n              return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n            });\n\n            if (vertices.length) {\n              var _iterator2 = _createForOfIteratorHelper(vertices),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var vertex = _step2.value;\n                  var p3 = vertex.destination,\n                      triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n\n                  if (triangleFreq > pOptions.links.triangles.frequency) {\n                    continue;\n                  }\n\n                  _this.drawLinkTriangle(linkParticle, link, vertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n\n          if (link.opacity > 0 && container.retina.linksWidth > 0) {\n            _this.drawLinkLine(linkParticle, link);\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      context.restore();\n    }\n  }, {\n    key: \"particleCreated\",\n    value: function particleCreated(particle) {\n      var linkParticle = particle;\n      linkParticle.links = [];\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle) {\n      var linkParticle = particle;\n      linkParticle.links = [];\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n      var opacity = link.opacity;\n      container.canvas.draw(function (ctx) {\n        var _a, _b, _c;\n\n        var colorLine;\n        var twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n        if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n          var twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = Math.random() < twinkleFreq;\n\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n\n        if (!colorLine) {\n          var linksOptions = p1.options.links,\n              linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorLine) {\n          return;\n        }\n\n        var width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : container.retina.linksDistance;\n\n        _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n      });\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n      if (opacityTriangle <= 0) {\n        return;\n      }\n\n      container.canvas.draw(function (ctx) {\n        var pos1 = p1.getPosition();\n        var pos2 = p2.getPosition();\n        var pos3 = p3.getPosition();\n\n        if (getDistance(pos1, pos2) > container.retina.linksDistance || getDistance(pos3, pos2) > container.retina.linksDistance || getDistance(pos3, pos1) > container.retina.linksDistance) {\n          return;\n        }\n\n        var colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n        if (!colorTriangle) {\n          var linksOptions = p1.options.links,\n              linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorTriangle) {\n          return;\n        }\n\n        _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n      });\n    }\n  }]);\n\n  return LinkInstance;\n}();","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRangeValue","rangeColorToRgb","LinkInstance","container","context","particle","linkParticle","particles","pOptions","options","links","length","save","p1Links","filter","l","linkFreq","getLinkFrequency","destination","frequency","link","p2","triangles","enable","map","vertices","t","indexOf","vertex","p3","triangleFreq","getTriangleFrequency","opacity","retina","linksWidth","restore","p1","actualOptions","pos1","getPosition","pos2","canvas","draw","ctx","_a","_b","_c","colorLine","twinkle","lines","twinkleFreq","twinkleRgb","color","twinkling","Math","random","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","width","maxDistance","linksDistance","size","warp","backgroundMask","composite","shadow","link1","link2","triangleOptions","opacityTriangle","pos3","colorTriangle"],"mappings":"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","sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n    }\n    drawParticle(context, particle) {\n        const linkParticle = particle, container = this.container, particles = container.particles, pOptions = particle.options;\n        if (linkParticle.links.length <= 0) {\n            return;\n        }\n        context.save();\n        const p1Links = linkParticle.links.filter((l) => {\n            const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n            return linkFreq <= pOptions.links.frequency;\n        });\n        for (const link of p1Links) {\n            const p2 = link.destination;\n            if (pOptions.links.triangles.enable) {\n                const links = p1Links.map((l) => l.destination), vertices = p2.links.filter((t) => {\n                    const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n                    return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n                });\n                if (vertices.length) {\n                    for (const vertex of vertices) {\n                        const p3 = vertex.destination, triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n                        if (triangleFreq > pOptions.links.triangles.frequency) {\n                            continue;\n                        }\n                        this.drawLinkTriangle(linkParticle, link, vertex);\n                    }\n                }\n            }\n            if (link.opacity > 0 && container.retina.linksWidth > 0) {\n                this.drawLinkLine(linkParticle, link);\n            }\n        }\n        context.restore();\n    }\n    particleCreated(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    particleDestroyed(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = Math.random() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : container.retina.linksDistance;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            const pos3 = p3.getPosition();\n            if (getDistance(pos1, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos1) > container.retina.linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}