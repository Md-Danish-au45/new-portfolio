{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, Vector, calcEasing, clamp, divMode, divModeExecute, getDistances, isDivModeEnabled, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nexport class Repulser extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.repulse) {\n      container.repulse = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions;\n\n      if (mode !== \"repulse\") {\n        return;\n      }\n\n      if (!container.repulse) {\n        container.repulse = {\n          particles: []\n        };\n      }\n\n      container.repulse.clicking = true;\n      container.repulse.count = 0;\n\n      for (const particle of container.repulse.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.repulse.particles = [];\n      container.repulse.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.repulse) {\n            container.repulse = {\n              particles: []\n            };\n          }\n\n          container.repulse.clicking = false;\n        }\n      }, options.interactivity.modes.repulse.duration * 1000);\n    };\n  }\n\n  clear() {}\n\n  init() {}\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode,\n          divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n      this.hoverRepulse();\n    } else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n      this.clickRepulse();\n    } else {\n      divModeExecute(\"repulse\", divs, (selector, div) => this.singleSelectorRepulse(selector, div));\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv,\n          divRepulse = isDivModeEnabled(\"repulse\", divs);\n\n    if (!(divRepulse || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n  }\n\n  reset() {}\n\n  clickRepulse() {\n    const container = this.container;\n\n    if (!container.repulse) {\n      container.repulse = {\n        particles: []\n      };\n    }\n\n    if (!container.repulse.finish) {\n      if (!container.repulse.count) {\n        container.repulse.count = 0;\n      }\n\n      container.repulse.count++;\n\n      if (container.repulse.count === container.particles.count) {\n        container.repulse.finish = true;\n      }\n    }\n\n    if (container.repulse.clicking) {\n      const repulseDistance = container.retina.repulseModeDistance,\n            repulseRadius = Math.pow(repulseDistance / 6, 3),\n            mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (mouseClickPos === undefined) {\n        return;\n      }\n\n      const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius),\n            query = container.particles.quadTree.query(range, p => this.isEnabled(p));\n\n      for (const particle of query) {\n        const {\n          dx,\n          dy,\n          distance\n        } = getDistances(mouseClickPos, particle.position),\n              d = distance ** 2,\n              velocity = container.actualOptions.interactivity.modes.repulse.speed,\n              force = -repulseRadius * velocity / d;\n\n        if (d <= repulseRadius) {\n          container.repulse.particles.push(particle);\n          const vect = Vector.create(dx, dy);\n          vect.length = force;\n          particle.velocity.setTo(vect);\n        }\n      }\n    } else if (container.repulse.clicking === false) {\n      for (const particle of container.repulse.particles) {\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.repulse.particles = [];\n    }\n  }\n\n  hoverRepulse() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const repulseRadius = container.retina.repulseModeDistance;\n    this.processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n  }\n\n  processRepulse(position, repulseRadius, area, divRepulse) {\n    var _a;\n\n    const container = this.container,\n          query = container.particles.quadTree.query(area, p => this.isEnabled(p)),\n          repulseOptions = container.actualOptions.interactivity.modes.repulse;\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = getDistances(particle.position, position),\n            velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : repulseOptions.speed) * repulseOptions.factor,\n            repulseFactor = clamp(calcEasing(1 - distance / repulseRadius, repulseOptions.easing) * velocity, 0, repulseOptions.maxSpeed),\n            normVec = Vector.create(distance === 0 ? velocity : dx / distance * repulseFactor, distance === 0 ? velocity : dy / distance * repulseFactor);\n      particle.position.addTo(normVec);\n    }\n  }\n\n  singleSelectorRepulse(selector, div) {\n    const container = this.container,\n          query = document.querySelectorAll(selector);\n\n    if (!query.length) {\n      return;\n    }\n\n    query.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            divs = container.actualOptions.interactivity.modes.repulse.divs,\n            divRepulse = divMode(divs, elem);\n      this.processRepulse(pos, repulseRadius, area, divRepulse);\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/port/node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js"],"names":["Circle","ExternalInteractorBase","Rectangle","Vector","calcEasing","clamp","divMode","divModeExecute","getDistances","isDivModeEnabled","isInArray","mouseMoveEvent","Repulser","constructor","container","repulse","particles","handleClickMode","mode","options","actualOptions","clicking","count","particle","isEnabled","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","interactivity","modes","duration","clear","init","interact","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","divs","onDiv","hoverRepulse","clickRepulse","selector","div","singleSelectorRepulse","_a","mouse","divRepulse","position","clickPosition","reset","repulseDistance","retina","repulseModeDistance","repulseRadius","Math","pow","mouseClickPos","undefined","range","x","y","query","quadTree","p","dx","dy","distance","d","speed","force","push","vect","create","length","mousePos","processRepulse","area","repulseOptions","factor","repulseFactor","easing","maxSpeed","normVec","addTo","document","querySelectorAll","forEach","item","elem","pxRatio","pixelRatio","pos","offsetLeft","offsetWidth","offsetTop","offsetHeight","type"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, Vector, calcEasing, clamp, divMode, divModeExecute, getDistances, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nexport class Repulser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions;\n            if (mode !== \"repulse\") {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            container.repulse.clicking = true;\n            container.repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.repulse.particles = [];\n            container.repulse.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.repulse) {\n                        container.repulse = { particles: [] };\n                    }\n                    container.repulse.clicking = false;\n                }\n            }, options.interactivity.modes.repulse.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n            this.hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n            this.clickRepulse();\n        }\n        else {\n            divModeExecute(\"repulse\", divs, (selector, div) => this.singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divRepulse = isDivModeEnabled(\"repulse\", divs);\n        if (!(divRepulse || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n    }\n    reset() {\n    }\n    clickRepulse() {\n        const container = this.container;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        if (!container.repulse.finish) {\n            if (!container.repulse.count) {\n                container.repulse.count = 0;\n            }\n            container.repulse.count++;\n            if (container.repulse.count === container.particles.count) {\n                container.repulse.finish = true;\n            }\n        }\n        if (container.repulse.clicking) {\n            const repulseDistance = container.retina.repulseModeDistance, repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\n            if (mouseClickPos === undefined) {\n                return;\n            }\n            const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = container.actualOptions.interactivity.modes.repulse.speed, force = (-repulseRadius * velocity) / d;\n                if (d <= repulseRadius) {\n                    container.repulse.particles.push(particle);\n                    const vect = Vector.create(dx, dy);\n                    vect.length = force;\n                    particle.velocity.setTo(vect);\n                }\n            }\n        }\n        else if (container.repulse.clicking === false) {\n            for (const particle of container.repulse.particles) {\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.repulse.particles = [];\n        }\n    }\n    hoverRepulse() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const repulseRadius = container.retina.repulseModeDistance;\n        this.processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n    }\n    processRepulse(position, repulseRadius, area, divRepulse) {\n        var _a;\n        const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n        for (const particle of query) {\n            const { dx, dy, distance } = getDistances(particle.position, position), velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(calcEasing(1 - distance / repulseRadius, repulseOptions.easing) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\n            particle.position.addTo(normVec);\n        }\n    }\n    singleSelectorRepulse(selector, div) {\n        const container = this.container, query = document.querySelectorAll(selector);\n        if (!query.length) {\n            return;\n        }\n        query.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = container.actualOptions.interactivity.modes.repulse.divs, divRepulse = divMode(divs, elem);\n            this.processRepulse(pos, repulseRadius, area, divRepulse);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}