{"ast":null,"code":"import { Circle, ExternalInteractorBase, Vector, calcEasing, clamp, getDistances, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions;\n\n      if (mode !== \"attract\") {\n        return;\n      }\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      container.attract.clicking = true;\n      container.attract.count = 0;\n\n      for (const particle of container.attract.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n\n          container.attract.clicking = false;\n        }\n      }, options.interactivity.modes.attract.duration * 1000);\n    };\n  }\n\n  clear() {}\n\n  init() {}\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n      this.clickAttract();\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n\n  reset() {}\n\n  clickAttract() {\n    const container = this.container;\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n\n      container.attract.count++;\n\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n\n    return;\n  }\n\n  hoverAttract() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const attractRadius = container.retina.attractModeDistance;\n    this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n\n  processAttract(position, attractRadius, area) {\n    const container = this.container,\n          attractOptions = container.actualOptions.interactivity.modes.attract,\n          query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = getDistances(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/port/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js"],"names":["Circle","ExternalInteractorBase","Vector","calcEasing","clamp","getDistances","isInArray","mouseMoveEvent","Attractor","constructor","container","attract","particles","handleClickMode","mode","options","actualOptions","clicking","count","particle","isEnabled","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","interactivity","modes","duration","clear","init","interact","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","hoverAttract","clickAttract","_a","mouse","position","clickPosition","reset","mousePos","attractRadius","retina","attractModeDistance","processAttract","x","y","area","attractOptions","query","quadTree","p","dx","dy","distance","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Vector, calcEasing, clamp, getDistances, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions;\n            if (mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.attract) {\n                        container.attract = { particles: [] };\n                    }\n                    container.attract.clicking = false;\n                }\n            }, options.interactivity.modes.attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    reset() {\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition;\n            if (!mousePos) {\n                return;\n            }\n            const attractRadius = container.retina.attractModeDistance;\n            this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n    hoverAttract() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const { dx, dy, distance } = getDistances(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}