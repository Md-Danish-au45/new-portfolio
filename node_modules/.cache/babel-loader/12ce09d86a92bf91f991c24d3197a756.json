{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    var value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    var _value = particleValue - (optionsValue - modeValue) * ratio;\n\n    return clamp(_value, modeValue, particleValue);\n  }\n}\n\nexport var Bubbler = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bubbler, _ExternalInteractorBa);\n\n  var _super = _createSuper(Bubbler);\n\n  function Bubbler(container) {\n    var _this;\n\n    _classCallCheck(this, Bubbler);\n\n    _this = _super.call(this, container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    _this.handleClickMode = function (mode) {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n\n    return _this;\n  }\n\n  _createClass(Bubbler, [{\n    key: \"clear\",\n    value: function clear(particle, force) {\n      if (particle.bubble.inRange && !force) {\n        return;\n      }\n\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var options, events, onHover, onClick, hoverEnabled, hoverMode, clickEnabled, clickMode, divs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n\n                if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n                  this.hoverBubble();\n                } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n                  this.clickBubble();\n                } else {\n                  divModeExecute(\"bubble\", divs, function (selector, div) {\n                    return _this2.singleSelectorHover(selector, div);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n      if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle) {\n      particle.bubble.inRange = false;\n    }\n  }, {\n    key: \"clickBubble\",\n    value: function clickBubble() {\n      var _this3 = this;\n\n      var _a, _b;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (!mouseClickPos) {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance, function (p) {\n        return _this3.isEnabled(p);\n      });\n\n      var _iterator = _createForOfIteratorHelper(query),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n\n          if (!container.bubble.clicking) {\n            continue;\n          }\n\n          particle.bubble.inRange = !container.bubble.durationEnd;\n          var pos = particle.getPosition(),\n              distMouse = getDistance(pos, mouseClickPos),\n              timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n          if (timeSpent > options.interactivity.modes.bubble.duration) {\n            container.bubble.durationEnd = true;\n          }\n\n          if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n            container.bubble.clicking = false;\n            container.bubble.durationEnd = false;\n          }\n\n          var sizeData = {\n            bubbleObj: {\n              optValue: container.retina.bubbleModeSize,\n              value: particle.bubble.radius\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n              value: particle.size.value\n            },\n            type: \"size\"\n          };\n          this.process(particle, distMouse, timeSpent, sizeData);\n          var opacityData = {\n            bubbleObj: {\n              optValue: options.interactivity.modes.bubble.opacity,\n              value: particle.bubble.opacity\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.opacity.value),\n              value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n            },\n            type: \"opacity\"\n          };\n          this.process(particle, distMouse, timeSpent, opacityData);\n\n          if (!container.bubble.durationEnd) {\n            if (distMouse <= container.retina.bubbleModeDistance) {\n              this.hoverBubbleColor(particle, distMouse);\n            } else {\n              delete particle.bubble.color;\n            }\n          } else {\n            delete particle.bubble.color;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"hoverBubble\",\n    value: function hoverBubble() {\n      var _this4 = this;\n\n      var container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n        return _this4.isEnabled(p);\n      });\n\n      var _iterator2 = _createForOfIteratorHelper(query),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var particle = _step2.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition(),\n              pointDistance = getDistance(pos, mousePos),\n              ratio = 1 - pointDistance / distance;\n\n          if (pointDistance <= distance) {\n            if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n              this.hoverBubbleSize(particle, ratio);\n              this.hoverBubbleOpacity(particle, ratio);\n              this.hoverBubbleColor(particle, ratio);\n            }\n          } else {\n            this.reset(particle);\n          }\n\n          if (container.interactivity.status === mouseLeaveEvent) {\n            this.reset(particle);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"hoverBubbleColor\",\n    value: function hoverBubbleColor(particle, ratio, divBubble) {\n      var options = this.container.actualOptions;\n      var bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n      if (!particle.bubble.finalColor) {\n        var modeColor = bubbleOptions.color;\n\n        if (!modeColor) {\n          return;\n        }\n\n        var bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n        particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n      }\n\n      if (!particle.bubble.finalColor) {\n        return;\n      }\n\n      if (bubbleOptions.mix) {\n        particle.bubble.color = undefined;\n        var pColor = particle.getFillColor();\n        particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n      } else {\n        particle.bubble.color = particle.bubble.finalColor;\n      }\n    }\n  }, {\n    key: \"hoverBubbleOpacity\",\n    value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n      var _a, _b, _c;\n\n      var container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n      if (!modeOpacity) {\n        return;\n      }\n\n      var optOpacity = particle.options.opacity.value;\n      var pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n      var opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    }\n  }, {\n    key: \"hoverBubbleSize\",\n    value: function hoverBubbleSize(particle, ratio, divBubble) {\n      var container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n      if (modeSize === undefined) {\n        return;\n      }\n\n      var optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var pSize = particle.size.value;\n      var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    }\n  }, {\n    key: \"process\",\n    value: function process(particle, distMouse, timeSpent, data) {\n      var container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n      if (bubbleParam === undefined) {\n        return;\n      }\n\n      var options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n      if (bubbleParam === particlesParam) {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === \"size\") {\n              particle.bubble.radius = value;\n            }\n\n            if (type === \"opacity\") {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === \"size\") {\n            delete particle.bubble.radius;\n          }\n\n          if (type === \"opacity\") {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }, {\n    key: \"singleSelectorHover\",\n    value: function singleSelectorHover(selector, div) {\n      var _this5 = this;\n\n      var container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n      if (!selectors.length) {\n        return;\n      }\n\n      selectors.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area, function (p) {\n          return _this5.isEnabled(p);\n        });\n\n        var _iterator3 = _createForOfIteratorHelper(query),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var particle = _step3.value;\n\n            if (!area.contains(particle.getPosition())) {\n              continue;\n            }\n\n            particle.bubble.inRange = true;\n            var divs = container.actualOptions.interactivity.modes.bubble.divs;\n            var divBubble = divMode(divs, elem);\n\n            if (!particle.bubble.div || particle.bubble.div !== elem) {\n              _this5.clear(particle, true);\n\n              particle.bubble.div = elem;\n            }\n\n            _this5.hoverBubbleSize(particle, 1, divBubble);\n\n            _this5.hoverBubbleOpacity(particle, 1, divBubble);\n\n            _this5.hoverBubbleColor(particle, 1, divBubble);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }]);\n\n  return Bubbler;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromArray","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","container","bubble","handleClickMode","mode","clicking","particle","force","inRange","div","opacity","radius","color","options","actualOptions","events","interactivity","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","divs","onDiv","hoverBubble","clickBubble","selector","singleSelectorHover","_a","mouse","divBubble","position","clickPosition","_b","mouseClickPos","distance","retina","bubbleModeDistance","query","particles","quadTree","queryCircle","p","isEnabled","durationEnd","pos","getPosition","distMouse","timeSpent","Date","getTime","clickTime","modes","duration","sizeData","bubbleObj","optValue","bubbleModeSize","particlesObj","size","pixelRatio","type","process","opacityData","hoverBubbleColor","mousePos","undefined","pointDistance","status","hoverBubbleSize","hoverBubbleOpacity","reset","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor","_c","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","contains","clear"],"mappings":";;;;;;;AAAA,SAASA,MAAT,EAAiBC,sBAAjB,EAAyCC,SAAzC,EAAoDC,KAApD,EAA2DC,QAA3D,EAAqEC,OAArE,EAA8EC,cAA9E,EAA8FC,WAA9F,EAA2GC,WAA3G,EAAwHC,gBAAxH,EAA0IC,SAA1I,EAAqJC,aAArJ,EAAoKC,eAApK,EAAqLC,cAArL,EAAqMC,eAArM,EAAsNC,QAAtN,QAAuO,oBAAvO;;AACA,SAASC,oBAAT,CAA8BC,aAA9B,EAA6CC,SAA7C,EAAwDC,YAAxD,EAAsEC,KAAtE,EAA6E;AACzE,MAAIF,SAAS,IAAIC,YAAjB,EAA+B;AAC3B,QAAME,KAAK,GAAGJ,aAAa,GAAG,CAACC,SAAS,GAAGC,YAAb,IAA6BC,KAA3D;AACA,WAAOjB,KAAK,CAACkB,KAAD,EAAQJ,aAAR,EAAuBC,SAAvB,CAAZ;AACH,GAHD,MAIK,IAAIA,SAAS,GAAGC,YAAhB,EAA8B;AAC/B,QAAME,MAAK,GAAGJ,aAAa,GAAG,CAACE,YAAY,GAAGD,SAAhB,IAA6BE,KAA3D;;AACA,WAAOjB,KAAK,CAACkB,MAAD,EAAQH,SAAR,EAAmBD,aAAnB,CAAZ;AACH;AACJ;;AACD,WAAaK,OAAb;AAAA;;AAAA;;AACI,mBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AACnB,8BAAMA,SAAN;;AACA,QAAI,CAACA,SAAS,CAACC,MAAf,EAAuB;AACnBD,MAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACD,UAAKC,eAAL,GAAuB,UAACC,IAAD,EAAU;AAC7B,UAAIA,IAAI,KAAK,QAAb,EAAuB;AACnB;AACH;;AACD,UAAI,CAACH,SAAS,CAACC,MAAf,EAAuB;AACnBD,QAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACDD,MAAAA,SAAS,CAACC,MAAV,CAAiBG,QAAjB,GAA4B,IAA5B;AACH,KARD;;AALmB;AActB;;AAfL;AAAA;AAAA,WAgBI,eAAMC,QAAN,EAAgBC,KAAhB,EAAuB;AACnB,UAAID,QAAQ,CAACJ,MAAT,CAAgBM,OAAhB,IAA2B,CAACD,KAAhC,EAAuC;AACnC;AACH;;AACD,aAAOD,QAAQ,CAACJ,MAAT,CAAgBO,GAAvB;AACA,aAAOH,QAAQ,CAACJ,MAAT,CAAgBQ,OAAvB;AACA,aAAOJ,QAAQ,CAACJ,MAAT,CAAgBS,MAAvB;AACA,aAAOL,QAAQ,CAACJ,MAAT,CAAgBU,KAAvB;AACH;AAxBL;AAAA;AAAA,WAyBI,gBAAO,CACN;AA1BL;AAAA;AAAA;AAAA,+EA2BI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,OADV,GACoB,KAAKZ,SAAL,CAAea,aADnC,EACkDC,MADlD,GAC2DF,OAAO,CAACG,aAAR,CAAsBD,MADjF,EACyFE,OADzF,GACmGF,MAAM,CAACE,OAD1G,EACmHC,OADnH,GAC6HH,MAAM,CAACG,OADpI,EAC6IC,YAD7I,GAC4JF,OAAO,CAACG,MADpK,EAC4KC,SAD5K,GACwLJ,OAAO,CAACb,IADhM,EACsMkB,YADtM,GACqNJ,OAAO,CAACE,MAD7N,EACqOG,SADrO,GACiPL,OAAO,CAACd,IADzP,EAC+PoB,IAD/P,GACsQT,MAAM,CAACU,KAD7Q;;AAEI,oBAAIN,YAAY,IAAI/B,SAAS,CAAC,QAAD,EAAWiC,SAAX,CAA7B,EAAoD;AAChD,uBAAKK,WAAL;AACH,iBAFD,MAGK,IAAIJ,YAAY,IAAIlC,SAAS,CAAC,QAAD,EAAWmC,SAAX,CAA7B,EAAoD;AACrD,uBAAKI,WAAL;AACH,iBAFI,MAGA;AACD3C,kBAAAA,cAAc,CAAC,QAAD,EAAWwC,IAAX,EAAiB,UAACI,QAAD,EAAWnB,GAAX;AAAA,2BAAmB,MAAI,CAACoB,mBAAL,CAAyBD,QAAzB,EAAmCnB,GAAnC,CAAnB;AAAA,mBAAjB,CAAd;AACH;;AAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA3BJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAuCI,mBAAUH,QAAV,EAAoB;AAChB,UAAIwB,EAAJ;;AACA,UAAM7B,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCY,OAAO,GAAGZ,SAAS,CAACa,aAAtD;AAAA,UAAqEiB,KAAK,GAAG9B,SAAS,CAACe,aAAV,CAAwBe,KAArG;AAAA,UAA4GhB,MAAM,GAAG,CAAC,CAACe,EAAE,GAAGxB,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACU,aAAnE,MAAsF,IAAtF,IAA8Fc,EAAE,KAAK,KAAK,CAA1G,GAA8GA,EAA9G,GAAmHjB,OAAO,CAACG,aAA5H,EAA2ID,MAAhQ;AAAA,UAAwQS,IAAI,GAAGT,MAAM,CAACU,KAAtR;AAAA,UAA6RO,SAAS,GAAG7C,gBAAgB,CAAC,QAAD,EAAWqC,IAAX,CAAzT;;AACA,UAAI,EAAEQ,SAAS,IAAKjB,MAAM,CAACE,OAAP,CAAeG,MAAf,IAAyBW,KAAK,CAACE,QAA7C,IAA2DlB,MAAM,CAACG,OAAP,CAAeE,MAAf,IAAyBW,KAAK,CAACG,aAA5F,CAAJ,EAAiH;AAC7G,eAAO,KAAP;AACH;;AACD,UAAMb,SAAS,GAAGN,MAAM,CAACE,OAAP,CAAeb,IAAjC;AACA,UAAMmB,SAAS,GAAGR,MAAM,CAACG,OAAP,CAAed,IAAjC;AACA,aAAOhB,SAAS,CAAC,QAAD,EAAWiC,SAAX,CAAT,IAAkCjC,SAAS,CAAC,QAAD,EAAWmC,SAAX,CAA3C,IAAoES,SAA3E;AACH;AAhDL;AAAA;AAAA,WAiDI,eAAM1B,QAAN,EAAgB;AACZA,MAAAA,QAAQ,CAACJ,MAAT,CAAgBM,OAAhB,GAA0B,KAA1B;AACH;AAnDL;AAAA;AAAA,WAoDI,uBAAc;AAAA;;AACV,UAAIsB,EAAJ,EAAQK,EAAR;;AACA,UAAMlC,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCY,OAAO,GAAGZ,SAAS,CAACa,aAAtD;AAAA,UAAqEsB,aAAa,GAAGnC,SAAS,CAACe,aAAV,CAAwBe,KAAxB,CAA8BG,aAAnH;;AACA,UAAI,CAACE,aAAL,EAAoB;AAChB;AACH;;AACD,UAAI,CAACnC,SAAS,CAACC,MAAf,EAAuB;AACnBD,QAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACD,UAAMmC,QAAQ,GAAGpC,SAAS,CAACqC,MAAV,CAAiBC,kBAAlC;AAAA,UAAsDC,KAAK,GAAGvC,SAAS,CAACwC,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCP,aAAzC,EAAwDC,QAAxD,EAAkE,UAACO,CAAD;AAAA,eAAO,MAAI,CAACC,SAAL,CAAeD,CAAf,CAAP;AAAA,OAAlE,CAA9D;;AATU,iDAUaJ,KAVb;AAAA;;AAAA;AAUV,4DAA8B;AAAA,cAAnBlC,QAAmB;;AAC1B,cAAI,CAACL,SAAS,CAACC,MAAV,CAAiBG,QAAtB,EAAgC;AAC5B;AACH;;AACDC,UAAAA,QAAQ,CAACJ,MAAT,CAAgBM,OAAhB,GAA0B,CAACP,SAAS,CAACC,MAAV,CAAiB4C,WAA5C;AACA,cAAMC,GAAG,GAAGzC,QAAQ,CAAC0C,WAAT,EAAZ;AAAA,cAAoCC,SAAS,GAAGhE,WAAW,CAAC8D,GAAD,EAAMX,aAAN,CAA3D;AAAA,cAAiFc,SAAS,GAAG,CAAC,IAAIC,IAAJ,GAAWC,OAAX,MAAwBnD,SAAS,CAACe,aAAV,CAAwBe,KAAxB,CAA8BsB,SAA9B,IAA2C,CAAnE,CAAD,IAA0E,IAAvK;;AACA,cAAIH,SAAS,GAAGrC,OAAO,CAACG,aAAR,CAAsBsC,KAAtB,CAA4BpD,MAA5B,CAAmCqD,QAAnD,EAA6D;AACzDtD,YAAAA,SAAS,CAACC,MAAV,CAAiB4C,WAAjB,GAA+B,IAA/B;AACH;;AACD,cAAII,SAAS,GAAGrC,OAAO,CAACG,aAAR,CAAsBsC,KAAtB,CAA4BpD,MAA5B,CAAmCqD,QAAnC,GAA8C,CAA9D,EAAiE;AAC7DtD,YAAAA,SAAS,CAACC,MAAV,CAAiBG,QAAjB,GAA4B,KAA5B;AACAJ,YAAAA,SAAS,CAACC,MAAV,CAAiB4C,WAAjB,GAA+B,KAA/B;AACH;;AACD,cAAMU,QAAQ,GAAG;AACbC,YAAAA,SAAS,EAAE;AACPC,cAAAA,QAAQ,EAAEzD,SAAS,CAACqC,MAAV,CAAiBqB,cADpB;AAEP5D,cAAAA,KAAK,EAAEO,QAAQ,CAACJ,MAAT,CAAgBS;AAFhB,aADE;AAKbiD,YAAAA,YAAY,EAAE;AACVF,cAAAA,QAAQ,EAAExE,WAAW,CAACoB,QAAQ,CAACO,OAAT,CAAiBgD,IAAjB,CAAsB9D,KAAvB,CAAX,GAA2CE,SAAS,CAACqC,MAAV,CAAiBwB,UAD5D;AAEV/D,cAAAA,KAAK,EAAEO,QAAQ,CAACuD,IAAT,CAAc9D;AAFX,aALD;AASbgE,YAAAA,IAAI,EAAE;AATO,WAAjB;AAWA,eAAKC,OAAL,CAAa1D,QAAb,EAAuB2C,SAAvB,EAAkCC,SAAlC,EAA6CM,QAA7C;AACA,cAAMS,WAAW,GAAG;AAChBR,YAAAA,SAAS,EAAE;AACPC,cAAAA,QAAQ,EAAE7C,OAAO,CAACG,aAAR,CAAsBsC,KAAtB,CAA4BpD,MAA5B,CAAmCQ,OADtC;AAEPX,cAAAA,KAAK,EAAEO,QAAQ,CAACJ,MAAT,CAAgBQ;AAFhB,aADK;AAKhBkD,YAAAA,YAAY,EAAE;AACVF,cAAAA,QAAQ,EAAExE,WAAW,CAACoB,QAAQ,CAACO,OAAT,CAAiBH,OAAjB,CAAyBX,KAA1B,CADX;AAEVA,cAAAA,KAAK,EAAE,CAACoC,EAAE,GAAG,CAACL,EAAE,GAAGxB,QAAQ,CAACI,OAAf,MAA4B,IAA5B,IAAoCoB,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAAC/B,KAAtE,MAAiF,IAAjF,IAAyFoC,EAAE,KAAK,KAAK,CAArG,GAAyGA,EAAzG,GAA8G;AAF3G,aALE;AAShB4B,YAAAA,IAAI,EAAE;AATU,WAApB;AAWA,eAAKC,OAAL,CAAa1D,QAAb,EAAuB2C,SAAvB,EAAkCC,SAAlC,EAA6Ce,WAA7C;;AACA,cAAI,CAAChE,SAAS,CAACC,MAAV,CAAiB4C,WAAtB,EAAmC;AAC/B,gBAAIG,SAAS,IAAIhD,SAAS,CAACqC,MAAV,CAAiBC,kBAAlC,EAAsD;AAClD,mBAAK2B,gBAAL,CAAsB5D,QAAtB,EAAgC2C,SAAhC;AACH,aAFD,MAGK;AACD,qBAAO3C,QAAQ,CAACJ,MAAT,CAAgBU,KAAvB;AACH;AACJ,WAPD,MAQK;AACD,mBAAON,QAAQ,CAACJ,MAAT,CAAgBU,KAAvB;AACH;AACJ;AA1DS;AAAA;AAAA;AAAA;AAAA;AA2Db;AA/GL;AAAA;AAAA,WAgHI,uBAAc;AAAA;;AACV,UAAMX,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCkE,QAAQ,GAAGlE,SAAS,CAACe,aAAV,CAAwBe,KAAxB,CAA8BE,QAA3E;;AACA,UAAIkC,QAAQ,KAAKC,SAAjB,EAA4B;AACxB;AACH;;AACD,UAAM/B,QAAQ,GAAGpC,SAAS,CAACqC,MAAV,CAAiBC,kBAAlC;AAAA,UAAsDC,KAAK,GAAGvC,SAAS,CAACwC,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCwB,QAAzC,EAAmD9B,QAAnD,EAA6D,UAACO,CAAD;AAAA,eAAO,MAAI,CAACC,SAAL,CAAeD,CAAf,CAAP;AAAA,OAA7D,CAA9D;;AALU,kDAMaJ,KANb;AAAA;;AAAA;AAMV,+DAA8B;AAAA,cAAnBlC,QAAmB;AAC1BA,UAAAA,QAAQ,CAACJ,MAAT,CAAgBM,OAAhB,GAA0B,IAA1B;AACA,cAAMuC,GAAG,GAAGzC,QAAQ,CAAC0C,WAAT,EAAZ;AAAA,cAAoCqB,aAAa,GAAGpF,WAAW,CAAC8D,GAAD,EAAMoB,QAAN,CAA/D;AAAA,cAAgFrE,KAAK,GAAG,IAAIuE,aAAa,GAAGhC,QAA5G;;AACA,cAAIgC,aAAa,IAAIhC,QAArB,EAA+B;AAC3B,gBAAIvC,KAAK,IAAI,CAAT,IAAcG,SAAS,CAACe,aAAV,CAAwBsD,MAAxB,KAAmC/E,cAArD,EAAqE;AACjE,mBAAKgF,eAAL,CAAqBjE,QAArB,EAA+BR,KAA/B;AACA,mBAAK0E,kBAAL,CAAwBlE,QAAxB,EAAkCR,KAAlC;AACA,mBAAKoE,gBAAL,CAAsB5D,QAAtB,EAAgCR,KAAhC;AACH;AACJ,WAND,MAOK;AACD,iBAAK2E,KAAL,CAAWnE,QAAX;AACH;;AACD,cAAIL,SAAS,CAACe,aAAV,CAAwBsD,MAAxB,KAAmChF,eAAvC,EAAwD;AACpD,iBAAKmF,KAAL,CAAWnE,QAAX;AACH;AACJ;AAtBS;AAAA;AAAA;AAAA;AAAA;AAuBb;AAvIL;AAAA;AAAA,WAwII,0BAAiBA,QAAjB,EAA2BR,KAA3B,EAAkCkC,SAAlC,EAA6C;AACzC,UAAMnB,OAAO,GAAG,KAAKZ,SAAL,CAAea,aAA/B;AACA,UAAM4D,aAAa,GAAG1C,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6CA,SAA7C,GAAyDnB,OAAO,CAACG,aAAR,CAAsBsC,KAAtB,CAA4BpD,MAA3G;;AACA,UAAI,CAACI,QAAQ,CAACJ,MAAT,CAAgByE,UAArB,EAAiC;AAC7B,YAAMC,SAAS,GAAGF,aAAa,CAAC9D,KAAhC;;AACA,YAAI,CAACgE,SAAL,EAAgB;AACZ;AACH;;AACD,YAAMC,WAAW,GAAGD,SAAS,YAAYE,KAArB,GAA6BzF,aAAa,CAACuF,SAAD,CAA1C,GAAwDA,SAA5E;AACAtE,QAAAA,QAAQ,CAACJ,MAAT,CAAgByE,UAAhB,GAA6BnF,eAAe,CAACqF,WAAD,CAA5C;AACH;;AACD,UAAI,CAACvE,QAAQ,CAACJ,MAAT,CAAgByE,UAArB,EAAiC;AAC7B;AACH;;AACD,UAAID,aAAa,CAACK,GAAlB,EAAuB;AACnBzE,QAAAA,QAAQ,CAACJ,MAAT,CAAgBU,KAAhB,GAAwBwD,SAAxB;AACA,YAAMY,MAAM,GAAG1E,QAAQ,CAAC2E,YAAT,EAAf;AACA3E,QAAAA,QAAQ,CAACJ,MAAT,CAAgBU,KAAhB,GAAwBoE,MAAM,GACxBvF,QAAQ,CAACX,QAAQ,CAACkG,MAAD,EAAS1E,QAAQ,CAACJ,MAAT,CAAgByE,UAAzB,EAAqC,IAAI7E,KAAzC,EAAgDA,KAAhD,CAAT,CADgB,GAExBQ,QAAQ,CAACJ,MAAT,CAAgByE,UAFtB;AAGH,OAND,MAOK;AACDrE,QAAAA,QAAQ,CAACJ,MAAT,CAAgBU,KAAhB,GAAwBN,QAAQ,CAACJ,MAAT,CAAgByE,UAAxC;AACH;AACJ;AAhKL;AAAA;AAAA,WAiKI,4BAAmBrE,QAAnB,EAA6BR,KAA7B,EAAoCkC,SAApC,EAA+C;AAC3C,UAAIF,EAAJ,EAAQK,EAAR,EAAY+C,EAAZ;;AACA,UAAMjF,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCY,OAAO,GAAGZ,SAAS,CAACa,aAAtD;AAAA,UAAqEqE,WAAW,GAAG,CAACrD,EAAE,GAAGE,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACtB,OAAtE,MAAmF,IAAnF,IAA2FoB,EAAE,KAAK,KAAK,CAAvG,GAA2GA,EAA3G,GAAgHjB,OAAO,CAACG,aAAR,CAAsBsC,KAAtB,CAA4BpD,MAA5B,CAAmCQ,OAAtO;;AACA,UAAI,CAACyE,WAAL,EAAkB;AACd;AACH;;AACD,UAAMC,UAAU,GAAG9E,QAAQ,CAACO,OAAT,CAAiBH,OAAjB,CAAyBX,KAA5C;AACA,UAAMsF,QAAQ,GAAG,CAACH,EAAE,GAAG,CAAC/C,EAAE,GAAG7B,QAAQ,CAACI,OAAf,MAA4B,IAA5B,IAAoCyB,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACpC,KAAtE,MAAiF,IAAjF,IAAyFmF,EAAE,KAAK,KAAK,CAArG,GAAyGA,EAAzG,GAA8G,CAA/H;AACA,UAAMxE,OAAO,GAAGhB,oBAAoB,CAAC2F,QAAD,EAAWF,WAAX,EAAwBjG,WAAW,CAACkG,UAAD,CAAnC,EAAiDtF,KAAjD,CAApC;;AACA,UAAIY,OAAO,KAAK0D,SAAhB,EAA2B;AACvB9D,QAAAA,QAAQ,CAACJ,MAAT,CAAgBQ,OAAhB,GAA0BA,OAA1B;AACH;AACJ;AA7KL;AAAA;AAAA,WA8KI,yBAAgBJ,QAAhB,EAA0BR,KAA1B,EAAiCkC,SAAjC,EAA4C;AACxC,UAAM/B,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCqF,QAAQ,GAAG,CAACtD,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAAC6B,IAAjE,IAAyE7B,SAAS,CAAC6B,IAAV,GAAiB5D,SAAS,CAACqC,MAAV,CAAiBwB,UAA3G,GAAwH7D,SAAS,CAACqC,MAAV,CAAiBqB,cAAtL;;AACA,UAAI2B,QAAQ,KAAKlB,SAAjB,EAA4B;AACxB;AACH;;AACD,UAAMmB,OAAO,GAAGrG,WAAW,CAACoB,QAAQ,CAACO,OAAT,CAAiBgD,IAAjB,CAAsB9D,KAAvB,CAAX,GAA2CE,SAAS,CAACqC,MAAV,CAAiBwB,UAA5E;AACA,UAAM0B,KAAK,GAAGlF,QAAQ,CAACuD,IAAT,CAAc9D,KAA5B;AACA,UAAM8D,IAAI,GAAGnE,oBAAoB,CAAC8F,KAAD,EAAQF,QAAR,EAAkBC,OAAlB,EAA2BzF,KAA3B,CAAjC;;AACA,UAAI+D,IAAI,KAAKO,SAAb,EAAwB;AACpB9D,QAAAA,QAAQ,CAACJ,MAAT,CAAgBS,MAAhB,GAAyBkD,IAAzB;AACH;AACJ;AAzLL;AAAA;AAAA,WA0LI,iBAAQvD,QAAR,EAAkB2C,SAAlB,EAA6BC,SAA7B,EAAwCuC,IAAxC,EAA8C;AAC1C,UAAMxF,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCyF,WAAW,GAAGD,IAAI,CAAChC,SAAL,CAAeC,QAA/D;;AACA,UAAIgC,WAAW,KAAKtB,SAApB,EAA+B;AAC3B;AACH;;AACD,UAAMvD,OAAO,GAAGZ,SAAS,CAACa,aAA1B;AAAA,UAAyC6E,cAAc,GAAG9E,OAAO,CAACG,aAAR,CAAsBsC,KAAtB,CAA4BpD,MAA5B,CAAmCqD,QAA7F;AAAA,UAAuGqC,cAAc,GAAG3F,SAAS,CAACqC,MAAV,CAAiBC,kBAAzI;AAAA,UAA6JsD,cAAc,GAAGJ,IAAI,CAAC7B,YAAL,CAAkBF,QAAhM;AAAA,UAA0MoC,UAAU,GAAGL,IAAI,CAAChC,SAAL,CAAe1D,KAAtO;AAAA,UAA6OgG,IAAI,GAAGN,IAAI,CAAC7B,YAAL,CAAkB7D,KAAlB,IAA2B,CAA/Q;AAAA,UAAkRgE,IAAI,GAAG0B,IAAI,CAAC1B,IAA9R;;AACA,UAAI2B,WAAW,KAAKG,cAApB,EAAoC;AAChC;AACH;;AACD,UAAI,CAAC5F,SAAS,CAACC,MAAf,EAAuB;AACnBD,QAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACD,UAAI,CAACD,SAAS,CAACC,MAAV,CAAiB4C,WAAtB,EAAmC;AAC/B,YAAIG,SAAS,IAAI2C,cAAjB,EAAiC;AAC7B,cAAMI,GAAG,GAAGF,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4DC,IAAxE;;AACA,cAAIC,GAAG,KAAKN,WAAZ,EAAyB;AACrB,gBAAM3F,KAAK,GAAGgG,IAAI,GAAI7C,SAAS,IAAI6C,IAAI,GAAGL,WAAX,CAAV,GAAqCC,cAA1D;;AACA,gBAAI5B,IAAI,KAAK,MAAb,EAAqB;AACjBzD,cAAAA,QAAQ,CAACJ,MAAT,CAAgBS,MAAhB,GAAyBZ,KAAzB;AACH;;AACD,gBAAIgE,IAAI,KAAK,SAAb,EAAwB;AACpBzD,cAAAA,QAAQ,CAACJ,MAAT,CAAgBQ,OAAhB,GAA0BX,KAA1B;AACH;AACJ;AACJ,SAXD,MAYK;AACD,cAAIgE,IAAI,KAAK,MAAb,EAAqB;AACjB,mBAAOzD,QAAQ,CAACJ,MAAT,CAAgBS,MAAvB;AACH;;AACD,cAAIoD,IAAI,KAAK,SAAb,EAAwB;AACpB,mBAAOzD,QAAQ,CAACJ,MAAT,CAAgBQ,OAAvB;AACH;AACJ;AACJ,OArBD,MAsBK,IAAIoF,UAAJ,EAAgB;AACjB,YAAI/B,IAAI,KAAK,MAAb,EAAqB;AACjB,iBAAOzD,QAAQ,CAACJ,MAAT,CAAgBS,MAAvB;AACH;;AACD,YAAIoD,IAAI,KAAK,SAAb,EAAwB;AACpB,iBAAOzD,QAAQ,CAACJ,MAAT,CAAgBQ,OAAvB;AACH;AACJ;AACJ;AApOL;AAAA;AAAA,WAqOI,6BAAoBkB,QAApB,EAA8BnB,GAA9B,EAAmC;AAAA;;AAC/B,UAAMR,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCgG,SAAS,GAAGC,QAAQ,CAACC,gBAAT,CAA0BvE,QAA1B,CAA9C;;AACA,UAAI,CAACqE,SAAS,CAACG,MAAf,EAAuB;AACnB;AACH;;AACDH,MAAAA,SAAS,CAACI,OAAV,CAAkB,UAACC,IAAD,EAAU;AACxB,YAAMC,IAAI,GAAGD,IAAb;AAAA,YAAmBE,OAAO,GAAGvG,SAAS,CAACqC,MAAV,CAAiBwB,UAA9C;AAAA,YAA0Df,GAAG,GAAG;AAC5D0D,UAAAA,CAAC,EAAE,CAACF,IAAI,CAACG,UAAL,GAAkBH,IAAI,CAACI,WAAL,GAAmB,CAAtC,IAA2CH,OADc;AAE5DI,UAAAA,CAAC,EAAE,CAACL,IAAI,CAACM,SAAL,GAAiBN,IAAI,CAACO,YAAL,GAAoB,CAAtC,IAA2CN;AAFc,SAAhE;AAAA,YAGGO,aAAa,GAAIR,IAAI,CAACI,WAAL,GAAmB,CAApB,GAAyBH,OAH5C;AAAA,YAGqDQ,IAAI,GAAGvG,GAAG,CAACsD,IAAJ,KAAa,QAAb,GACtD,IAAIrF,MAAJ,CAAWqE,GAAG,CAAC0D,CAAf,EAAkB1D,GAAG,CAAC6D,CAAtB,EAAyBG,aAAzB,CADsD,GAEtD,IAAInI,SAAJ,CAAc2H,IAAI,CAACG,UAAL,GAAkBF,OAAhC,EAAyCD,IAAI,CAACM,SAAL,GAAiBL,OAA1D,EAAmED,IAAI,CAACI,WAAL,GAAmBH,OAAtF,EAA+FD,IAAI,CAACO,YAAL,GAAoBN,OAAnH,CALN;AAAA,YAKmIhE,KAAK,GAAGvC,SAAS,CAACwC,SAAV,CAAoBC,QAApB,CAA6BF,KAA7B,CAAmCwE,IAAnC,EAAyC,UAACpE,CAAD;AAAA,iBAAO,MAAI,CAACC,SAAL,CAAeD,CAAf,CAAP;AAAA,SAAzC,CAL3I;;AADwB,oDAODJ,KAPC;AAAA;;AAAA;AAOxB,iEAA8B;AAAA,gBAAnBlC,QAAmB;;AAC1B,gBAAI,CAAC0G,IAAI,CAACC,QAAL,CAAc3G,QAAQ,CAAC0C,WAAT,EAAd,CAAL,EAA4C;AACxC;AACH;;AACD1C,YAAAA,QAAQ,CAACJ,MAAT,CAAgBM,OAAhB,GAA0B,IAA1B;AACA,gBAAMgB,IAAI,GAAGvB,SAAS,CAACa,aAAV,CAAwBE,aAAxB,CAAsCsC,KAAtC,CAA4CpD,MAA5C,CAAmDsB,IAAhE;AACA,gBAAMQ,SAAS,GAAGjD,OAAO,CAACyC,IAAD,EAAO+E,IAAP,CAAzB;;AACA,gBAAI,CAACjG,QAAQ,CAACJ,MAAT,CAAgBO,GAAjB,IAAwBH,QAAQ,CAACJ,MAAT,CAAgBO,GAAhB,KAAwB8F,IAApD,EAA0D;AACtD,cAAA,MAAI,CAACW,KAAL,CAAW5G,QAAX,EAAqB,IAArB;;AACAA,cAAAA,QAAQ,CAACJ,MAAT,CAAgBO,GAAhB,GAAsB8F,IAAtB;AACH;;AACD,YAAA,MAAI,CAAChC,eAAL,CAAqBjE,QAArB,EAA+B,CAA/B,EAAkC0B,SAAlC;;AACA,YAAA,MAAI,CAACwC,kBAAL,CAAwBlE,QAAxB,EAAkC,CAAlC,EAAqC0B,SAArC;;AACA,YAAA,MAAI,CAACkC,gBAAL,CAAsB5D,QAAtB,EAAgC,CAAhC,EAAmC0B,SAAnC;AACH;AArBuB;AAAA;AAAA;AAAA;AAAA;AAsB3B,OAtBD;AAuBH;AAjQL;;AAAA;AAAA,EAA6BrD,sBAA7B","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.clear(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}