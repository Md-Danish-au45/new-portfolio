{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce } from \"tsparticles-engine\";\nexport var Bouncer = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bouncer, _ExternalInteractorBa);\n\n  var _super = _createSuper(Bouncer);\n\n  function Bouncer(container) {\n    _classCallCheck(this, Bouncer);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Bouncer, [{\n    key: \"clear\",\n    value: function clear() {}\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var container, options, events, mouseMoveStatus, hoverEnabled, hoverMode, divs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n\n                if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n                  this.processMouseBounce();\n                } else {\n                  divModeExecute(\"bounce\", divs, function (selector, div) {\n                    return _this.singleSelectorBounce(selector, div);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv;\n      return mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode) || isDivModeEnabled(\"bounce\", divs);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"processBounce\",\n    value: function processBounce(position, radius, area) {\n      var _this2 = this;\n\n      var query = this.container.particles.quadTree.query(area, function (p) {\n        return _this2.isEnabled(p);\n      });\n\n      var _iterator = _createForOfIteratorHelper(query),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n\n          if (area instanceof Circle) {\n            circleBounce(circleBounceDataFromParticle(particle), {\n              position: position,\n              radius: radius,\n              mass: Math.pow(radius, 2) * Math.PI / 2,\n              velocity: Vector.origin,\n              factor: Vector.origin\n            });\n          } else if (area instanceof Rectangle) {\n            rectBounce(particle, calculateBounds(position, radius));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"processMouseBounce\",\n    value: function processMouseBounce() {\n      var container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          tolerance = 10 * pxRatio,\n          mousePos = container.interactivity.mouse.position,\n          radius = container.retina.bounceModeDistance;\n\n      if (mousePos) {\n        this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n      }\n    }\n  }, {\n    key: \"singleSelectorBounce\",\n    value: function singleSelectorBounce(selector, div) {\n      var _this3 = this;\n\n      var container = this.container,\n          query = document.querySelectorAll(selector);\n\n      if (!query.length) {\n        return;\n      }\n\n      query.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            radius = elem.offsetWidth / 2 * pxRatio,\n            tolerance = 10 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n\n        _this3.processBounce(pos, radius, area);\n      });\n    }\n  }]);\n\n  return Bouncer;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js"],"names":["Circle","ExternalInteractorBase","Rectangle","Vector","calculateBounds","circleBounce","circleBounceDataFromParticle","divModeExecute","isDivModeEnabled","isInArray","mouseMoveEvent","rectBounce","Bouncer","container","options","actualOptions","events","interactivity","mouseMoveStatus","status","hoverEnabled","onHover","enable","hoverMode","mode","divs","onDiv","processMouseBounce","selector","div","singleSelectorBounce","particle","_a","mouse","position","radius","area","query","particles","quadTree","p","isEnabled","mass","Math","PI","velocity","origin","factor","pxRatio","retina","pixelRatio","tolerance","mousePos","bounceModeDistance","processBounce","x","y","document","querySelectorAll","length","forEach","item","elem","pos","offsetLeft","offsetWidth","offsetTop","offsetHeight","type"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this.processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    reset() {\n    }\n    processBounce(position, radius, area) {\n        const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (area instanceof Circle) {\n                circleBounce(circleBounceDataFromParticle(particle), {\n                    position,\n                    radius,\n                    mass: (radius ** 2 * Math.PI) / 2,\n                    velocity: Vector.origin,\n                    factor: Vector.origin,\n                });\n            }\n            else if (area instanceof Rectangle) {\n                rectBounce(particle, calculateBounds(position, radius));\n            }\n        }\n    }\n    processMouseBounce() {\n        const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n        if (mousePos) {\n            this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        }\n    }\n    singleSelectorBounce(selector, div) {\n        const container = this.container, query = document.querySelectorAll(selector);\n        if (!query.length) {\n            return;\n        }\n        query.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, radius + tolerance)\n                : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n            this.processBounce(pos, radius, area);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}