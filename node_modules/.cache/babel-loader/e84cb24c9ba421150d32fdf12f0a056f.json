{"ast":null,"code":"import _slicedToArray from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particles_engine;\n\nimport { calcPositionFromSize, getRangeMax, getRangeMin, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nexport var Particles = /*#__PURE__*/function () {\n  function Particles(engine, container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n\n    _Particles_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    var canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n\n  _createClass(Particles, [{\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this.container,\n          options = container.actualOptions;\n\n      var _iterator = _createForOfIteratorHelper(options.manualParticles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n          this.addParticle(calcPositionFromSize({\n            size: container.canvas.size,\n            position: particle.position\n          }), particle.options);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group) {\n      var container = this.container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit * container.density;\n\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      return this.pushParticle(position, overrideOptions, group);\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent, splitParticlesOptions) {\n      var splitOptions = parent.options.destroy.split,\n          options = loadParticlesOptions(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.container, parent.options),\n          factor = getValue(splitOptions.factor);\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n\n      options.load(splitParticlesOptions);\n      var offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n          position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset)\n      };\n      return this.pushParticle(position, options, parent.group, function (particle) {\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = parent.splitCount + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n      this.zArray = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.array = [];\n      this.zArray = [];\n      this.movers = [];\n      this.updaters = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function () {\n      var _draw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(delta) {\n        var container, canvasSize, _iterator2, _step2, _step2$value, plugin, _iterator3, _step3, p;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, canvasSize = this.container.canvas.size;\n                this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n                container.canvas.clear();\n                _context.next = 5;\n                return this.update(delta);\n\n              case 5:\n                if (this.needsSort) {\n                  this.zArray.sort(function (a, b) {\n                    return b.position.z - a.position.z || a.id - b.id;\n                  });\n                  this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n                  this.needsSort = false;\n                }\n\n                _iterator2 = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _step2$value = _slicedToArray(_step2.value, 2), plugin = _step2$value[1];\n                    container.canvas.drawPlugin(plugin, delta);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _iterator3 = _createForOfIteratorHelper(this.zArray);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    p = _step3.value;\n                    p.draw(delta);\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function draw(_x) {\n        return _draw.apply(this, arguments);\n      }\n\n      return draw;\n    }()\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var range = setRangeValue(p1.id, p2.id),\n          key = \"\".concat(getRangeMin(range), \"_\").concat(getRangeMax(range));\n      var res = this.freqs.links.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.links.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.freqs.triangles.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.triangles.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleClickMode\",\n    value: function handleClickMode(mode) {\n      this.interactionManager.handleClickMode(mode);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      this.freqs.links = new Map();\n      this.freqs.triangles = new Map();\n      var handled = false;\n      this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n      this.interactionManager.init();\n\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.addManualParticles();\n\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n\n          for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n\n      this.interactionManager.init();\n      container.pathGenerator.init(container);\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"redraw\",\n    value: function () {\n      var _redraw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.clear();\n                this.init();\n                _context2.next = 4;\n                return this.draw({\n                  value: 0,\n                  factor: 0\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function redraw() {\n        return _redraw.apply(this, arguments);\n      }\n\n      return redraw;\n    }()\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(index >= 0 && index <= this.count)) {\n        return;\n      }\n\n      var deleted = 0;\n\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this.array[i];\n\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n\n        particle.destroy(override);\n        this.array.splice(i--, 1);\n        var zIdx = this.zArray.indexOf(particle);\n        this.zArray.splice(zIdx, 1);\n        deleted++;\n\n        __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleRemoved\", {\n          container: this.container,\n          data: {\n            particle: particle\n          }\n        });\n      }\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n\n      for (var group in options.particles.groups) {\n        this.applyDensity(options.particles.groups[group], 0, group);\n      }\n\n      this.applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(delta) {\n        var container, particlesToDelete, _iterator5, _step5, _step5$value, plugin, _iterator6, _step6, _particle, resizeFactor, _iterator8, _step8, _step8$value, _plugin, _iterator9, _step9, mover, _i2, _particlesToDelete, particle, _iterator7, _step7, _particle2, _iterator10, _step10, updater;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                container = this.container, particlesToDelete = [];\n                container.pathGenerator.update();\n                _iterator5 = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    _step5$value = _slicedToArray(_step5.value, 2), plugin = _step5$value[1];\n\n                    if (plugin.update) {\n                      plugin.update(delta);\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                _iterator6 = _createForOfIteratorHelper(this.array);\n                _context3.prev = 5;\n\n                _iterator6.s();\n\n              case 7:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                _particle = _step6.value;\n                resizeFactor = container.canvas.resizeFactor;\n\n                if (resizeFactor && !_particle.ignoresResizeRatio) {\n                  _particle.position.x *= resizeFactor.width;\n                  _particle.position.y *= resizeFactor.height;\n                }\n\n                _particle.ignoresResizeRatio = false;\n                _context3.next = 14;\n                return this.interactionManager.reset(_particle);\n\n              case 14:\n                _iterator8 = _createForOfIteratorHelper(this.container.plugins);\n                _context3.prev = 15;\n\n                _iterator8.s();\n\n              case 17:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _step8$value = _slicedToArray(_step8.value, 2), _plugin = _step8$value[1];\n\n                if (!_particle.destroyed) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                return _context3.abrupt(\"break\", 24);\n\n              case 21:\n                if (_plugin.particleUpdate) {\n                  _plugin.particleUpdate(_particle, delta);\n                }\n\n              case 22:\n                _context3.next = 17;\n                break;\n\n              case 24:\n                _context3.next = 29;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t0 = _context3[\"catch\"](15);\n\n                _iterator8.e(_context3.t0);\n\n              case 29:\n                _context3.prev = 29;\n\n                _iterator8.f();\n\n                return _context3.finish(29);\n\n              case 32:\n                _iterator9 = _createForOfIteratorHelper(this.movers);\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    mover = _step9.value;\n\n                    if (mover.isEnabled(_particle)) {\n                      mover.move(_particle, delta);\n                    }\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                if (!_particle.destroyed) {\n                  _context3.next = 37;\n                  break;\n                }\n\n                particlesToDelete.push(_particle);\n                return _context3.abrupt(\"continue\", 38);\n\n              case 37:\n                this.quadTree.insert(new Point(_particle.getPosition(), _particle));\n\n              case 38:\n                _context3.next = 7;\n                break;\n\n              case 40:\n                _context3.next = 45;\n                break;\n\n              case 42:\n                _context3.prev = 42;\n                _context3.t1 = _context3[\"catch\"](5);\n\n                _iterator6.e(_context3.t1);\n\n              case 45:\n                _context3.prev = 45;\n\n                _iterator6.f();\n\n                return _context3.finish(45);\n\n              case 48:\n                for (_i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n                  particle = _particlesToDelete[_i2];\n                  this.remove(particle);\n                }\n\n                _context3.next = 51;\n                return this.interactionManager.externalInteract(delta);\n\n              case 51:\n                _iterator7 = _createForOfIteratorHelper(container.particles.array);\n                _context3.prev = 52;\n\n                _iterator7.s();\n\n              case 54:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context3.next = 63;\n                  break;\n                }\n\n                _particle2 = _step7.value;\n                _iterator10 = _createForOfIteratorHelper(this.updaters);\n\n                try {\n                  for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                    updater = _step10.value;\n                    updater.update(_particle2, delta);\n                  }\n                } catch (err) {\n                  _iterator10.e(err);\n                } finally {\n                  _iterator10.f();\n                }\n\n                if (!(!_particle2.destroyed && !_particle2.spawning)) {\n                  _context3.next = 61;\n                  break;\n                }\n\n                _context3.next = 61;\n                return this.interactionManager.particlesInteract(_particle2, delta);\n\n              case 61:\n                _context3.next = 54;\n                break;\n\n              case 63:\n                _context3.next = 68;\n                break;\n\n              case 65:\n                _context3.prev = 65;\n                _context3.t2 = _context3[\"catch\"](52);\n\n                _iterator7.e(_context3.t2);\n\n              case 68:\n                _context3.prev = 68;\n\n                _iterator7.f();\n\n                return _context3.finish(68);\n\n              case 71:\n                delete container.canvas.resizeFactor;\n\n              case 72:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 42, 45, 48], [15, 26, 29, 32], [52, 65, 68, 71]]);\n      }));\n\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options, manualCount, group) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number,\n          densityFactor = this.initDensityFactor(numberOptions.density),\n          optParticlesNumber = numberOptions.value,\n          optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n          particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n          particlesCount = Math.min(this.count, this.array.filter(function (t) {\n        return t.group === group;\n      }).length);\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element,\n          pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n  }, {\n    key: \"pushParticle\",\n    value: function pushParticle(position, overrideOptions, group, initializer) {\n      try {\n        var particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n        var canAdd = true;\n\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n\n        if (!canAdd) {\n          return;\n        }\n\n        this.array.push(particle);\n        this.zArray.push(particle);\n        this.nextId++;\n\n        __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleAdded\", {\n          container: this.container,\n          data: {\n            particle: particle\n          }\n        });\n\n        return particle;\n      } catch (e) {\n        console.warn(\"error adding particle: \".concat(e));\n        return;\n      }\n    }\n  }]);\n\n  return Particles;\n}();\n_Particles_engine = new WeakMap();","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-engine/esm/Core/Particles.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particles_engine","calcPositionFromSize","getRangeMax","getRangeMin","getValue","randomInRange","setRangeValue","InteractionManager","Particle","Point","QuadTree","Rectangle","loadParticlesOptions","Particles","engine","container","nextId","array","zArray","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","canvasSize","canvas","size","quadTree","width","height","movers","plugins","getMovers","updaters","getUpdaters","length","options","actualOptions","manualParticles","particle","addParticle","position","overrideOptions","group","particles","number","density","countToRemove","count","removeQuantity","pushParticle","parent","splitParticlesOptions","splitOptions","destroy","split","factor","color","load","hsl","getFillColor","min","max","offset","sizeOffset","x","y","velocity","splitCount","unbreakable","setTimeout","delta","clear","update","sort","a","b","z","id","plugin","drawPlugin","p","draw","p1","p2","range","key","res","undefined","Math","random","p3","id1","id2","id3","mode","handleClickMode","_a","handled","init","particlesInitialization","addManualParticles","groups","groupOptions","i","j","pathGenerator","nb","mouse","pushing","override","removeAt","indexOf","index","quantity","deleted","splice","zIdx","dispatchEvent","data","applyDensity","particlesToDelete","resizeFactor","ignoresResizeRatio","reset","destroyed","particleUpdate","mover","isEnabled","move","push","insert","getPosition","remove","externalInteract","updater","spawning","particlesInteract","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","canAdd","e","console","warn","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { calcPositionFromSize, getRangeMax, getRangeMin, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        _Particles_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n        this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(calcPositionFromSize({\n                size: container.canvas.size,\n                position: particle.position,\n            }), particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent, splitParticlesOptions) {\n        const splitOptions = parent.options.destroy.split, options = loadParticlesOptions(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.container, parent.options), factor = getValue(splitOptions.factor);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitParticlesOptions);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    destroy() {\n        this.array = [];\n        this.zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    getLinkFrequency(p1, p2) {\n        const range = setRangeValue(p1.id, p2.id), key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    handleClickMode(mode) {\n        this.interactionManager.handleClickMode(mode);\n    }\n    init() {\n        var _a;\n        const container = this.container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        this.interactionManager.init();\n        container.pathGenerator.init(container);\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n            __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleRemoved\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this.container, particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this.interactionManager.reset(particle);\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number, densityFactor = this.initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleAdded\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n_Particles_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}