{"ast":null,"code":"import _classCallCheck from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\n\nfunction updateRoll(particle, delta) {\n  var roll = particle.options.roll;\n\n  if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n    return;\n  }\n\n  var speed = particle.roll.speed * delta.factor,\n      max = 2 * Math.PI;\n  particle.roll.angle += speed;\n\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\n\nexport var RollUpdater = /*#__PURE__*/function () {\n  function RollUpdater() {\n    _classCallCheck(this, RollUpdater);\n  }\n\n  _createClass(RollUpdater, [{\n    key: \"getTransformValues\",\n    value: function getTransformValues(particle) {\n      var _a;\n\n      var roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll,\n          rollHorizontal = roll && roll.horizontal,\n          rollVertical = roll && roll.vertical;\n      return {\n        a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n        d: rollVertical ? Math.sin(roll.angle) : undefined\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(particle) {\n      var rollOpt = particle.options.roll;\n\n      if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n        particle.roll = {\n          enable: rollOpt.enable,\n          horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n          vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n          angle: Math.random() * Math.PI * 2,\n          speed: getRangeValue(rollOpt.speed) / 360\n        };\n\n        if (rollOpt.backColor) {\n          particle.backColor = rangeColorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          var alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n          particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n          };\n        } else if (rollOpt.darken.enable) {\n          particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value)\n          };\n        } else if (rollOpt.enlighten.enable) {\n          particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value)\n          };\n        }\n      } else {\n        particle.roll = {\n          enable: false,\n          horizontal: false,\n          vertical: false,\n          angle: 0,\n          speed: 0\n        };\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var roll = particle.options.roll;\n      return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n\n        if (!(source === null || source === void 0 ? void 0 : source.roll)) {\n          continue;\n        }\n\n        if (!options.roll) {\n          options.roll = new Roll();\n        }\n\n        options.roll.load(source.roll);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateRoll(particle, delta);\n    }\n  }]);\n\n  return RollUpdater;\n}();","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-updater-roll/esm/RollUpdater.js"],"names":["getRangeValue","rangeColorToHsl","Roll","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","_a","rollHorizontal","horizontal","rollVertical","vertical","a","cos","undefined","d","sin","rollOpt","mode","random","backColor","darken","enlighten","alterType","alter","type","value","destroyed","spawning","sources","source","load","isEnabled"],"mappings":"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","sourcesContent":["import { getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor, max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    getTransformValues(particle) {\n        var _a;\n        const roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n            particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: Math.random() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = rangeColorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0,\n            };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.roll)) {\n                continue;\n            }\n            if (!options.roll) {\n                options.roll = new Roll();\n            }\n            options.roll.load(source.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}