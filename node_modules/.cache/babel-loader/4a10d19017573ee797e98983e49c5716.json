{"ast":null,"code":"import _asyncToGenerator from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/danish/Desktop/danishwork/new-portfolio/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Circle, ExternalInteractorBase, Vector, calcEasing, clamp, getDistances, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nexport var Attractor = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Attractor, _ExternalInteractorBa);\n\n  var _super = _createSuper(Attractor);\n\n  function Attractor(container) {\n    var _this;\n\n    _classCallCheck(this, Attractor);\n\n    _this = _super.call(this, container);\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    _this.handleClickMode = function (mode) {\n      var options = _this.container.actualOptions;\n\n      if (mode !== \"attract\") {\n        return;\n      }\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      container.attract.clicking = true;\n      container.attract.count = 0;\n\n      var _iterator = _createForOfIteratorHelper(container.attract.particles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n\n          if (!_this.isEnabled(particle)) {\n            continue;\n          }\n\n          particle.velocity.setTo(particle.initialVelocity);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(function () {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n\n          container.attract.clicking = false;\n        }\n      }, options.interactivity.modes.attract.duration * 1000);\n    };\n\n    return _this;\n  }\n\n  _createClass(Attractor, [{\n    key: \"clear\",\n    value: function clear() {}\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var container, options, mouseMoveStatus, events, hoverEnabled, hoverMode, clickEnabled, clickMode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n\n                if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n                  this.hoverAttract();\n                } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n                  this.clickAttract();\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n\n      if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n      return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"clickAttract\",\n    value: function clickAttract() {\n      var container = this.container;\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      if (!container.attract.finish) {\n        if (!container.attract.count) {\n          container.attract.count = 0;\n        }\n\n        container.attract.count++;\n\n        if (container.attract.count === container.particles.count) {\n          container.attract.finish = true;\n        }\n      }\n\n      if (container.attract.clicking) {\n        var mousePos = container.interactivity.mouse.clickPosition;\n\n        if (!mousePos) {\n          return;\n        }\n\n        var attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n      } else if (container.attract.clicking === false) {\n        container.attract.particles = [];\n      }\n\n      return;\n    }\n  }, {\n    key: \"hoverAttract\",\n    value: function hoverAttract() {\n      var container = this.container;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n  }, {\n    key: \"processAttract\",\n    value: function processAttract(position, attractRadius, area) {\n      var _this2 = this;\n\n      var container = this.container,\n          attractOptions = container.actualOptions.interactivity.modes.attract,\n          query = container.particles.quadTree.query(area, function (p) {\n        return _this2.isEnabled(p);\n      });\n\n      var _iterator2 = _createForOfIteratorHelper(query),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var particle = _step2.value;\n\n          var _getDistances = getDistances(particle.position, position),\n              dx = _getDistances.dx,\n              dy = _getDistances.dy,\n              distance = _getDistances.distance;\n\n          var velocity = attractOptions.speed * attractOptions.factor;\n          var attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n          var normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n          particle.position.subFrom(normVec);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return Attractor;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js"],"names":["Circle","ExternalInteractorBase","Vector","calcEasing","clamp","getDistances","isInArray","mouseMoveEvent","Attractor","container","attract","particles","handleClickMode","mode","options","actualOptions","clicking","count","particle","isEnabled","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","interactivity","modes","duration","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","hoverAttract","clickAttract","_a","mouse","position","clickPosition","mousePos","attractRadius","retina","attractModeDistance","processAttract","x","y","area","attractOptions","query","quadTree","p","dx","dy","distance","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom"],"mappings":";;;;;;;AAAA,SAASA,MAAT,EAAiBC,sBAAjB,EAAyCC,MAAzC,EAAiDC,UAAjD,EAA6DC,KAA7D,EAAoEC,YAApE,EAAkFC,SAAlF,EAA6FC,cAA7F,QAAoH,oBAApH;AACA,WAAaC,SAAb;AAAA;;AAAA;;AACI,qBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AACnB,8BAAMA,SAAN;;AACA,QAAI,CAACA,SAAS,CAACC,OAAf,EAAwB;AACpBD,MAAAA,SAAS,CAACC,OAAV,GAAoB;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAApB;AACH;;AACD,UAAKC,eAAL,GAAuB,UAACC,IAAD,EAAU;AAC7B,UAAMC,OAAO,GAAG,MAAKL,SAAL,CAAeM,aAA/B;;AACA,UAAIF,IAAI,KAAK,SAAb,EAAwB;AACpB;AACH;;AACD,UAAI,CAACJ,SAAS,CAACC,OAAf,EAAwB;AACpBD,QAAAA,SAAS,CAACC,OAAV,GAAoB;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAApB;AACH;;AACDF,MAAAA,SAAS,CAACC,OAAV,CAAkBM,QAAlB,GAA6B,IAA7B;AACAP,MAAAA,SAAS,CAACC,OAAV,CAAkBO,KAAlB,GAA0B,CAA1B;;AAT6B,iDAUNR,SAAS,CAACC,OAAV,CAAkBC,SAVZ;AAAA;;AAAA;AAU7B,4DAAoD;AAAA,cAAzCO,QAAyC;;AAChD,cAAI,CAAC,MAAKC,SAAL,CAAeD,QAAf,CAAL,EAA+B;AAC3B;AACH;;AACDA,UAAAA,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwBH,QAAQ,CAACI,eAAjC;AACH;AAf4B;AAAA;AAAA;AAAA;AAAA;;AAgB7Bb,MAAAA,SAAS,CAACC,OAAV,CAAkBC,SAAlB,GAA8B,EAA9B;AACAF,MAAAA,SAAS,CAACC,OAAV,CAAkBa,MAAlB,GAA2B,KAA3B;AACAC,MAAAA,UAAU,CAAC,YAAM;AACb,YAAI,CAACf,SAAS,CAACgB,SAAf,EAA0B;AACtB,cAAI,CAAChB,SAAS,CAACC,OAAf,EAAwB;AACpBD,YAAAA,SAAS,CAACC,OAAV,GAAoB;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAApB;AACH;;AACDF,UAAAA,SAAS,CAACC,OAAV,CAAkBM,QAAlB,GAA6B,KAA7B;AACH;AACJ,OAPS,EAOPF,OAAO,CAACY,aAAR,CAAsBC,KAAtB,CAA4BjB,OAA5B,CAAoCkB,QAApC,GAA+C,IAPxC,CAAV;AAQH,KA1BD;;AALmB;AAgCtB;;AAjCL;AAAA;AAAA,WAkCI,iBAAQ,CACP;AAnCL;AAAA;AAAA,WAoCI,gBAAO,CACN;AArCL;AAAA;AAAA;AAAA,+EAsCI;AAAA;AAAA;AAAA;AAAA;AAAA;AACUnB,gBAAAA,SADV,GACsB,KAAKA,SAD3B,EACsCK,OADtC,GACgDL,SAAS,CAACM,aAD1D,EACyEc,eADzE,GAC2FpB,SAAS,CAACiB,aAAV,CAAwBI,MAAxB,KAAmCvB,cAD9H,EAC8IwB,MAD9I,GACuJjB,OAAO,CAACY,aAAR,CAAsBK,MAD7K,EACqLC,YADrL,GACoMD,MAAM,CAACE,OAAP,CAAeC,MADnN,EAC2NC,SAD3N,GACuOJ,MAAM,CAACE,OAAP,CAAepB,IADtP,EAC4PuB,YAD5P,GAC2QL,MAAM,CAACM,OAAP,CAAeH,MAD1R,EACkSI,SADlS,GAC8SP,MAAM,CAACM,OAAP,CAAexB,IAD7T;;AAEI,oBAAIgB,eAAe,IAAIG,YAAnB,IAAmC1B,SAAS,CAAC,SAAD,EAAY6B,SAAZ,CAAhD,EAAwE;AACpE,uBAAKI,YAAL;AACH,iBAFD,MAGK,IAAIH,YAAY,IAAI9B,SAAS,CAAC,SAAD,EAAYgC,SAAZ,CAA7B,EAAqD;AACtD,uBAAKE,YAAL;AACH;;AAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAtCJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA+CI,mBAAUtB,QAAV,EAAoB;AAChB,UAAIuB,EAAJ;;AACA,UAAMhC,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCK,OAAO,GAAGL,SAAS,CAACM,aAAtD;AAAA,UAAqE2B,KAAK,GAAGjC,SAAS,CAACiB,aAAV,CAAwBgB,KAArG;AAAA,UAA4GX,MAAM,GAAG,CAAC,CAACU,EAAE,GAAGvB,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACQ,aAAnE,MAAsF,IAAtF,IAA8Fe,EAAE,KAAK,KAAK,CAA1G,GAA8GA,EAA9G,GAAmH3B,OAAO,CAACY,aAA5H,EAA2IK,MAAhQ;;AACA,UAAI,CAAC,CAACW,KAAK,CAACC,QAAP,IAAmB,CAACZ,MAAM,CAACE,OAAP,CAAeC,MAApC,MAAgD,CAACQ,KAAK,CAACE,aAAP,IAAwB,CAACb,MAAM,CAACM,OAAP,CAAeH,MAAxF,CAAJ,EAAqG;AACjG,eAAO,KAAP;AACH;;AACD,UAAMC,SAAS,GAAGJ,MAAM,CAACE,OAAP,CAAepB,IAAjC;AAAA,UAAuCyB,SAAS,GAAGP,MAAM,CAACM,OAAP,CAAexB,IAAlE;AACA,aAAOP,SAAS,CAAC,SAAD,EAAY6B,SAAZ,CAAT,IAAmC7B,SAAS,CAAC,SAAD,EAAYgC,SAAZ,CAAnD;AACH;AAvDL;AAAA;AAAA,WAwDI,iBAAQ,CACP;AAzDL;AAAA;AAAA,WA0DI,wBAAe;AACX,UAAM7B,SAAS,GAAG,KAAKA,SAAvB;;AACA,UAAI,CAACA,SAAS,CAACC,OAAf,EAAwB;AACpBD,QAAAA,SAAS,CAACC,OAAV,GAAoB;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAApB;AACH;;AACD,UAAI,CAACF,SAAS,CAACC,OAAV,CAAkBa,MAAvB,EAA+B;AAC3B,YAAI,CAACd,SAAS,CAACC,OAAV,CAAkBO,KAAvB,EAA8B;AAC1BR,UAAAA,SAAS,CAACC,OAAV,CAAkBO,KAAlB,GAA0B,CAA1B;AACH;;AACDR,QAAAA,SAAS,CAACC,OAAV,CAAkBO,KAAlB;;AACA,YAAIR,SAAS,CAACC,OAAV,CAAkBO,KAAlB,KAA4BR,SAAS,CAACE,SAAV,CAAoBM,KAApD,EAA2D;AACvDR,UAAAA,SAAS,CAACC,OAAV,CAAkBa,MAAlB,GAA2B,IAA3B;AACH;AACJ;;AACD,UAAId,SAAS,CAACC,OAAV,CAAkBM,QAAtB,EAAgC;AAC5B,YAAM6B,QAAQ,GAAGpC,SAAS,CAACiB,aAAV,CAAwBgB,KAAxB,CAA8BE,aAA/C;;AACA,YAAI,CAACC,QAAL,EAAe;AACX;AACH;;AACD,YAAMC,aAAa,GAAGrC,SAAS,CAACsC,MAAV,CAAiBC,mBAAvC;AACA,aAAKC,cAAL,CAAoBJ,QAApB,EAA8BC,aAA9B,EAA6C,IAAI9C,MAAJ,CAAW6C,QAAQ,CAACK,CAApB,EAAuBL,QAAQ,CAACM,CAAhC,EAAmCL,aAAnC,CAA7C;AACH,OAPD,MAQK,IAAIrC,SAAS,CAACC,OAAV,CAAkBM,QAAlB,KAA+B,KAAnC,EAA0C;AAC3CP,QAAAA,SAAS,CAACC,OAAV,CAAkBC,SAAlB,GAA8B,EAA9B;AACH;;AACD;AACH;AApFL;AAAA;AAAA,WAqFI,wBAAe;AACX,UAAMF,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMoC,QAAQ,GAAGpC,SAAS,CAACiB,aAAV,CAAwBgB,KAAxB,CAA8BC,QAA/C;;AACA,UAAI,CAACE,QAAL,EAAe;AACX;AACH;;AACD,UAAMC,aAAa,GAAGrC,SAAS,CAACsC,MAAV,CAAiBC,mBAAvC;AACA,WAAKC,cAAL,CAAoBJ,QAApB,EAA8BC,aAA9B,EAA6C,IAAI9C,MAAJ,CAAW6C,QAAQ,CAACK,CAApB,EAAuBL,QAAQ,CAACM,CAAhC,EAAmCL,aAAnC,CAA7C;AACH;AA7FL;AAAA;AAAA,WA8FI,wBAAeH,QAAf,EAAyBG,aAAzB,EAAwCM,IAAxC,EAA8C;AAAA;;AAC1C,UAAM3C,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC4C,cAAc,GAAG5C,SAAS,CAACM,aAAV,CAAwBW,aAAxB,CAAsCC,KAAtC,CAA4CjB,OAA/F;AAAA,UAAwG4C,KAAK,GAAG7C,SAAS,CAACE,SAAV,CAAoB4C,QAApB,CAA6BD,KAA7B,CAAmCF,IAAnC,EAAyC,UAACI,CAAD;AAAA,eAAO,MAAI,CAACrC,SAAL,CAAeqC,CAAf,CAAP;AAAA,OAAzC,CAAhH;;AAD0C,kDAEnBF,KAFmB;AAAA;;AAAA;AAE1C,+DAA8B;AAAA,cAAnBpC,QAAmB;;AAC1B,8BAA6Bb,YAAY,CAACa,QAAQ,CAACyB,QAAV,EAAoBA,QAApB,CAAzC;AAAA,cAAQc,EAAR,iBAAQA,EAAR;AAAA,cAAYC,EAAZ,iBAAYA,EAAZ;AAAA,cAAgBC,QAAhB,iBAAgBA,QAAhB;;AACA,cAAMvC,QAAQ,GAAGiC,cAAc,CAACO,KAAf,GAAuBP,cAAc,CAACQ,MAAvD;AACA,cAAMC,aAAa,GAAG1D,KAAK,CAACD,UAAU,CAAC,IAAIwD,QAAQ,GAAGb,aAAhB,EAA+BO,cAAc,CAACU,MAA9C,CAAV,GAAkE3C,QAAnE,EAA6E,CAA7E,EAAgFiC,cAAc,CAACW,QAA/F,CAA3B;AACA,cAAMC,OAAO,GAAG/D,MAAM,CAACgE,MAAP,CAAcP,QAAQ,KAAK,CAAb,GAAiBvC,QAAjB,GAA6BqC,EAAE,GAAGE,QAAN,GAAkBG,aAA5D,EAA2EH,QAAQ,KAAK,CAAb,GAAiBvC,QAAjB,GAA6BsC,EAAE,GAAGC,QAAN,GAAkBG,aAAzH,CAAhB;AACA5C,UAAAA,QAAQ,CAACyB,QAAT,CAAkBwB,OAAlB,CAA0BF,OAA1B;AACH;AARyC;AAAA;AAAA;AAAA;AAAA;AAS7C;AAvGL;;AAAA;AAAA,EAA+BhE,sBAA/B","sourcesContent":["import { Circle, ExternalInteractorBase, Vector, calcEasing, clamp, getDistances, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions;\n            if (mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.attract) {\n                        container.attract = { particles: [] };\n                    }\n                    container.attract.clicking = false;\n                }\n            }, options.interactivity.modes.attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    reset() {\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition;\n            if (!mousePos) {\n                return;\n            }\n            const attractRadius = container.retina.attractModeDistance;\n            this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n    hoverAttract() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const { dx, dy, distance } = getDistances(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}