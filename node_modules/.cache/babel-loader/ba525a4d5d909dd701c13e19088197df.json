{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return clamp(value, modeValue, particleValue);\n  }\n}\n\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n  }\n\n  clear(particle, force) {\n    if (particle.bubble.inRange && !force) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  init() {}\n\n  async interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n  }\n\n  reset(particle) {\n    particle.bubble.inRange = false;\n  }\n\n  clickBubble() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = getDistance(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n      particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = divMode(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.clear(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/danish/Desktop/danishwork/new-portfolio/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromArray","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","constructor","container","bubble","handleClickMode","mode","clicking","clear","particle","force","inRange","div","opacity","radius","color","init","interact","options","actualOptions","events","interactivity","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","divs","onDiv","hoverBubble","clickBubble","selector","singleSelectorHover","isEnabled","_a","mouse","divBubble","position","clickPosition","reset","_b","mouseClickPos","distance","retina","bubbleModeDistance","query","particles","quadTree","queryCircle","p","durationEnd","pos","getPosition","distMouse","timeSpent","Date","getTime","clickTime","modes","duration","sizeData","bubbleObj","optValue","bubbleModeSize","particlesObj","size","pixelRatio","type","process","opacityData","hoverBubbleColor","mousePos","undefined","pointDistance","status","hoverBubbleSize","hoverBubbleOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor","_c","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","contains"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.clear(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}